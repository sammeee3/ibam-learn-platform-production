// middleware.ts
// Route protection middleware with tier-based access control

import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });

  // Get session
  const {
    data: { session },
  } = await supabase.auth.getSession();

  // Define protected routes
  const protectedRoutes = [
    '/dashboard',
    '/module',
    '/coaching',
    '/business-plan',
    '/assessment',
    '/profile'
  ];

  // Define public routes (don't require authentication)
  const publicRoutes = [
    '/',
    '/auth/login',
    '/auth/signup',
    '/trainers',
    '/api/webhooks',
    '/test',
    '/login-test',
    '/dashboard-test',
    '/admin-test',
    '/home'
  ];

  const { pathname } = req.nextUrl;

  // Check if current path is protected
  const isProtectedRoute = protectedRoutes.some(route => 
    pathname.startsWith(route)
  );

  // Check if current path is public
  const isPublicRoute = publicRoutes.some(route => 
    pathname === route || pathname.startsWith(route)
  );

  // Handle protected routes
  if (isProtectedRoute) {
    if (!session) {
      // Redirect to login with return URL
      const redirectUrl = req.nextUrl.clone();
      redirectUrl.pathname = '/auth/login';
      redirectUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(redirectUrl);
    }

    // User is authenticated, check if they have a profile
    try {
      const { data: profile, error } = await supabase
        .from('user_profiles')  // âœ… FIXED: was 'profiles'
        .select('subscription_tier, subscription_status, trial_end_date')
        .eq('id', session.user.id)
        .single();

      if (error || !profile) {
        // Profile doesn't exist, redirect to complete setup
        const redirectUrl = req.nextUrl.clone();
        redirectUrl.pathname = '/auth/complete-profile';
        return NextResponse.redirect(redirectUrl);
      }

      // Check subscription status
      if (profile.subscription_status === 'inactive' || profile.subscription_status === 'expired') {
        // For now, allow access but could redirect to renewal later
        // const redirectUrl = req.nextUrl.clone();
        // redirectUrl.pathname = '/subscription/renew';
        // return NextResponse.redirect(redirectUrl);
      }

      // Check trial expiration for trial users
      if (profile.subscription_tier === 'trial' && profile.trial_end_date) {
        const trialEnd = new Date(profile.trial_end_date);
        const now = new Date();
        
        if (now > trialEnd) {
          // For now, allow access but could redirect to upgrade later
          // const redirectUrl = req.nextUrl.clone();
          // redirectUrl.pathname = '/subscription/upgrade';
          // return NextResponse.redirect(redirectUrl);
        }
      }

    } catch (error) {
      console.error('Middleware error checking profile:', error);
      // On error, allow access for now (could redirect to login)
      // const redirectUrl = req.nextUrl.clone();
      // redirectUrl.pathname = '/auth/login';
      // return NextResponse.redirect(redirectUrl);
    }
  }

  // Handle auth routes when user is already logged in
  if ((pathname === '/auth/login' || pathname === '/auth/signup') && session) {
    // Redirect authenticated users away from auth pages
    const redirectUrl = req.nextUrl.clone();
    redirectUrl.pathname = '/dashboard';
    return NextResponse.redirect(redirectUrl);
  }

  return res;
}

// Configure which routes this middleware runs on
export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
};
