'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { User } from '@supabase/supabase-js';

interface Question {
  id: number;
  category: string;
  question: string;
  description: string;
  scale_min: number;
  scale_max: number;
  scale_labels: {
    [key: string]: string;
  };
}

interface Assessment {
  id: string;
  name: string;
  description: string;
  questions: Question[];
}

export default function DatabasePreAssessment() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [responses, setResponses] = useState<{ [key: number]: number }>({});
  const [assessment, setAssessment] = useState<Assessment | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    const initializeAssessment = async () => {
      try {
        // Get current user
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        if (userError || !user) {
          console.error('User not authenticated:', userError);
          router.push('/auth/login');
          return;
        }
        setUser(user);

        // Check if user has already completed pre-assessment
        const { data: existingResponse, error: responseError } = await supabase
          .from('assessment_responses')
          .select('id')
          .eq('user_id', user.id)
          .eq('assessment_id', 'b77f4b69-8ad4-41aa-8656-6fd1c9e809c7') // Pre-course assessment ID
          .single();

        if (existingResponse && !responseError) {
          // User already completed pre-assessment, redirect to dashboard
          router.push('/modules/1');
          return;
        }

        // Fetch pre-course assessment from database
        const { data: assessmentData, error: assessmentError } = await supabase
          .from('assessments')
          .select('*')
          .eq('id', 'b77f4b69-8ad4-41aa-8656-6fd1c9e809c7') // Pre-course assessment ID
          .eq('is_active', true)
          .single();

        if (assessmentError || !assessmentData) {
          console.error('Error fetching assessment:', assessmentError);
          return;
        }

        setAssessment(assessmentData);
      } catch (error) {
        console.error('Error initializing assessment:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeAssessment();
  }, [router, supabase]);

  const handleResponse = (value: number) => {
    if (!assessment) return;

    const newResponses = {
      ...responses,
      [assessment.questions[currentQuestion].id]: value
    };
    setResponses(newResponses);

    // Auto-advance to next question after 500ms
    setTimeout(() => {
      if (currentQuestion < assessment.questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
      }
    }, 500);
  };

  const handleSubmit = async () => {
    if (!assessment || !user || submitting) return;

    setSubmitting(true);

    try {
      // Calculate total score and category scores
      const totalScore = Object.values(responses).reduce((sum, score) => sum + score, 0);
      
      const categoryScores: { [category: string]: number } = {};
      assessment.questions.forEach(question => {
        const response = responses[question.id];
        if (response) {
          categoryScores[question.category] = response;
        }
      });

      // Save assessment response to database
      const { data, error } = await supabase
        .from('assessment_responses')
        .insert({
          user_id: user.id,
          assessment_id: assessment.id,
          responses: responses,
          total_score: totalScore,
          category_scores: categoryScores,
          completed_at: new Date().toISOString()
        })
        .select()
        .single();

      if (error) {
        console.error('Error saving assessment response:', error);
        alert('Error saving assessment. Please try again.');
        return;
      }

      console.log('Assessment response saved:', data);

      // Redirect to dashboard - platform access now unlocked
      router.push('/modules/1');

    } catch (error) {
      console.error('Error submitting assessment:', error);
      alert('Error submitting assessment. Please try again.');
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="bg-white rounded-2xl shadow-lg p-8 max-w-md w-full mx-4">
          <div className="animate-pulse">
            <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!assessment) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="bg-white rounded-2xl shadow-lg p-8 max-w-md w-full mx-4">
          <h2 className="text-xl font-bold text-gray-800 mb-4">Assessment Not Available</h2>
          <p className="text-gray-600 mb-4">Sorry, the pre-course assessment could not be loaded.</p>
          <button 
            onClick={() => router.push('/modules/1')}
            className="w-full bg-gradient-to-r from-teal-500 to-blue-600 text-white py-3 px-6 rounded-xl font-semibold text-lg hover:from-teal-600 hover:to-blue-700 transition-all duration-200"
          >
            Go to Dashboard
          </button>
        </div>
      </div>
    );
  }

  const currentQ = assessment.questions[currentQuestion];
  const progress = ((currentQuestion + 1) / assessment.questions.length) * 100;
  const isComplete = Object.keys(responses).length === assessment.questions.length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 md:p-8 max-w-2xl w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-800 mb-2">
            {assessment.name}
          </h1>
          <p className="text-gray-600 text-lg">
            {assessment.description}
          </p>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between text-sm text-gray-600 mb-2">
            <span>Question {currentQuestion + 1} of {assessment.questions.length}</span>
            <span>{Math.round(progress)}% Complete</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <div 
              className="bg-gradient-to-r from-teal-500 to-blue-600 h-3 rounded-full transition-all duration-300 ease-out"
              style={{ width: `${progress}%` }}
            ></div>
          </div>
        </div>

        {!isComplete ? (
          /* Current Question */
          <div>
            <div className="mb-6">
              <h2 className="text-xl md:text-2xl font-semibold text-gray-800 mb-2">
                {currentQ.category}
              </h2>
              <p className="text-lg md:text-xl text-gray-700 mb-3">
                {currentQ.question}
              </p>
              <p className="text-gray-600">
                {currentQ.description}
              </p>
            </div>

            {/* Rating Scale */}
            <div className="space-y-4">
              <div className="flex justify-between text-sm text-gray-600 mb-2">
                <span>{currentQ.scale_labels["1"]}</span>
                <span>{currentQ.scale_labels["10"]}</span>
              </div>
              
              <div className="grid grid-cols-5 md:grid-cols-10 gap-2">
                {[...Array(10)].map((_, index) => {
                  const value = index + 1;
                  const isSelected = responses[currentQ.id] === value;
                  
                  return (
                    <button
                      key={value}
                      onClick={() => handleResponse(value)}
                      className={`
                        aspect-square rounded-xl font-semibold text-lg transition-all duration-200 hover:scale-105
                        ${isSelected 
                          ? 'bg-gradient-to-r from-teal-500 to-blue-600 text-white shadow-lg transform scale-105' 
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }
                      `}
                    >
                      {value}
                    </button>
                  );
                })}
              </div>

              {responses[currentQ.id] && (
                <div className="text-center">
                  <p className="text-teal-600 font-medium">
                    ✓ {currentQ.scale_labels[responses[currentQ.id].toString()] || `Selected: ${responses[currentQ.id]}`}
                  </p>
                </div>
              )}
            </div>
          </div>
        ) : (
          /* Assessment Complete */
          <div className="text-center">
            <div className="mb-6">
              <div className="w-16 h-16 bg-gradient-to-r from-teal-500 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-gray-800 mb-2">Assessment Complete!</h2>
              <p className="text-gray-600 text-lg">
                Thank you for completing the pre-course assessment. Your responses will help us track your growth throughout the course.
              </p>
            </div>

            <button
              onClick={handleSubmit}
              disabled={submitting}
              className="bg-gradient-to-r from-teal-500 to-blue-600 text-white py-3 px-8 rounded-xl font-semibold text-lg hover:from-teal-600 hover:to-blue-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {submitting ? 'Saving...' : 'Access Learning Platform →'}
            </button>
          </div>
        )}

        {/* Navigation */}
        {!isComplete && currentQuestion > 0 && (
          <div className="mt-8 flex justify-between">
            <button
              onClick={() => setCurrentQuestion(currentQuestion - 1)}
              className="px-6 py-2 text-gray-600 hover:text-gray-800 transition-colors"
            >
              ← Previous
            </button>
            
            {responses[currentQ.id] && currentQuestion < assessment.questions.length - 1 && (
              <button
                onClick={() => setCurrentQuestion(currentQuestion + 1)}
                className="px-6 py-2 bg-gradient-to-r from-teal-500 to-blue-600 text-white rounded-lg hover:from-teal-600 hover:to-blue-700 transition-all duration-200"
              >
                Next →
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
}