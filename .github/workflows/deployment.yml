name: IBAM Secure Deployment Pipeline

on:
  push:
    branches: [staging, main]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID_STAGING: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}
  VERCEL_PROJECT_ID_PRODUCTION: ${{ secrets.VERCEL_PROJECT_ID_PRODUCTION }}

jobs:
  safety-checks:
    name: 🛡️ Security & Safety Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: 🚨 CRITICAL - Verify no pages directory
      run: |
        if [ -d "pages" ]; then
          echo "🚨 FATAL: pages/ directory found! This breaks App Router."
          echo "Remove pages/ directory before proceeding."
          exit 1
        fi
        echo "✅ App Router safe - no pages/ directory"
        
    - name: 🔍 TypeScript check
      run: npm run type-check || npx tsc --noEmit
      
    - name: 🧪 Build verification
      run: |
        npm run build
        echo "✅ Build completed successfully"
        
    - name: 🔐 Environment variable structure check
      run: |
        echo "Required environment variables:"
        echo "- NEXT_PUBLIC_SUPABASE_URL"
        echo "- NEXT_PUBLIC_SUPABASE_ANON_KEY" 
        echo "- SUPABASE_SERVICE_ROLE_KEY"
        echo "- IBAM_SYSTEME_SECRET"
        echo "✅ Environment structure validated"

  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: safety-checks
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy to Staging
      run: |
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
        echo "STAGING_URL=$(cat deployment-url.txt)" >> $GITHUB_ENV
        
    - name: 🧪 Staging Health Check
      run: |
        STAGING_URL=$(cat deployment-url.txt)
        echo "Testing staging deployment: $STAGING_URL"
        
        # Test main page
        curl -f -s "$STAGING_URL" > /dev/null || echo "❌ Main page test failed"
        
        # Test SSO endpoint
        curl -f -s "$STAGING_URL/api/auth/sso?email=test@example.com&token=test" > /dev/null || echo "❌ SSO endpoint test failed"
        
        echo "✅ Staging health check completed"
        
    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const stagingUrl = process.env.STAGING_URL;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🧪 **Staging Deployment Ready**\n\n🔗 **URL**: ${stagingUrl}\n\n**Test System.io Integration**: ${stagingUrl}/api/auth/sso?email=test@example.com&token=ibam-systeme-secret-2025\n\n✅ Ready for validation before production deployment`
          });

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: safety-checks
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy to Production
      run: |
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
        echo "PRODUCTION_URL=$(cat deployment-url.txt)" >> $GITHUB_ENV
        
    - name: 🚀 Production Health Check
      run: |
        PRODUCTION_URL=$(cat deployment-url.txt)
        echo "Testing production deployment: $PRODUCTION_URL"
        
        # Test main page
        curl -f -s "$PRODUCTION_URL" > /dev/null && echo "✅ Main page healthy" || echo "❌ Main page test failed"
        
        # Test SSO endpoint  
        curl -f -s "$PRODUCTION_URL/api/auth/sso?email=test@example.com&token=test" > /dev/null && echo "✅ SSO endpoint healthy" || echo "❌ SSO endpoint test failed"
        
        echo "🎉 Production deployment successful!"
        
    - name: 📊 Deployment Summary
      run: |
        echo "## 🎉 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: $(cat deployment-url.txt)" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY